import os
import telebot
from telebot import types
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

# üîë –ö–ª—é—á–∏
TELEGRAM_TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode='Markdown')
client = OpenAI(api_key=OPENAI_API_KEY)

# üß† –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ä–µ–∂–∏–º–æ–≤
user_modes = {}
chat_memory = {}

# --- /start ---
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üí¨ –ß–∞—Ç —Å –ò–ò")
    btn2 = types.KeyboardButton("üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π")
    btn3 = types.KeyboardButton("‚úçÔ∏è –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã")
    markup.add(btn1, btn2, btn3)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        reply_markup=markup
    )

# --- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ ---
@bot.message_handler(func=lambda message: message.text in ["üí¨ –ß–∞—Ç —Å –ò–ò", "üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π", "‚úçÔ∏è –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã"])
def set_mode(message):
    user_modes[message.chat.id] = message.text
    chat_memory[message.chat.id] = []  # –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    bot.send_message(message.chat.id, f"‚úÖ –†–µ–∂–∏–º *{message.text}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å ‚úçÔ∏è")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    mode = user_modes.get(message.chat.id, "üí¨ –ß–∞—Ç —Å –ò–ò")
    user_text = message.text.strip()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == "üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π":
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–æ —Ç–µ–º–µ: {user_text}"
    elif mode == "‚úçÔ∏è –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã":
        prompt = f"–ù–∞–ø–∏—à–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–º–µ: {user_text}"
    else:
        prompt = user_text

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    memory = chat_memory.get(message.chat.id, [])
    memory.append({"role": "user", "content": prompt})
    chat_memory[message.chat.id] = memory[-5:]  # —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π

    # --- –ó–∞–ø—Ä–æ—Å –∫ OpenAI ---
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."}] + memory
        )
        reply = response.choices[0].message.content
        bot.send_message(message.chat.id, reply)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
        memory.append({"role": "assistant", "content": reply})
        chat_memory[message.chat.id] = memory[-5:]

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n`{e}`")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
bot.polling(non_stop=True)

